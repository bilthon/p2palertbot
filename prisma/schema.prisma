// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum OrderType {
  BUY
  SELL
}

model Order {
  id                String      @id @map("_id")
  description       String
  amount            Float
  fee               Float
  botFee            Float       @map("bot_fee")
  communityFee      Float       @map("community_fee")
  status            String
  type              String
  fiatAmount        Float?      @map("fiat_amount")
  minAmount         Float?      @map("min_amount")
  maxAmount         Float?      @map("max_amount")
  fiatCode          String      @map("fiat_code")
  paymentMethod     String      @map("payment_method")
  takenAt           DateTime?   @map("taken_at")
  tgChatId          String?     @map("tg_chat_id")
  tgOrderMessage    String?     @map("tg_order_message")
  tgChannelMessage1 String      @map("tg_channel_message1")
  priceFromApi      Boolean     @map("price_from_api")
  priceMargin       Float       @map("price_margin")
  communityId       String?     @map("community_id")
  isPublic          Boolean     @map("is_public")
  createdAt         DateTime    @map("created_at") @default(now())
}


model User {
  id              Int           @id @default(autoincrement())
  telegramId      BigInt        @unique
  chatId          BigInt
  language        String        @default("en")
  alert           Alert[]
  subscription    Subscription[]
  deliveries      Delivery[]
}

model Alert {
  id              Int           @id @default(autoincrement())
  userId          Int
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  currency        String
  priceDelta      Float
  orderType       OrderType
  deliveries      Delivery[]

  @@unique([userId, currency, orderType])
}

model Subscription {
  id              Int           @id @default(autoincrement())
  userId          Int
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  created         DateTime      @default(now())
  duration        Int
  payment         Payment[]
}

model Payment {
  id              Int           @id @default(autoincrement())
  preimage        String?
  paymentHash     String        @unique
  paid            Boolean       @default(false)
  subscriptionId  Int
  subscription    Subscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  amount          BigInt
  created         DateTime
  duration        Int
  invoice         String        @db.VarChar(1500)
}

model Delivery {
  id              Int           @id @default(autoincrement())
  userId          Int
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  alertId         Int
  alert           Alert         @relation(fields: [alertId], references: [id], onDelete: Cascade)
  orderId         String
  date            DateTime      @default(now())

  @@unique([userId, orderId])
}